@using DXPivotGrid.Controllers
@using DXPivotGrid.Models

@model DXPivotGrid.Models.AnalysisReport

@{
    var pivotReport = Model;
    const string layoutFileName = @"D:\Temp\DemoGridLayout.grd";
    const string collapseFileName = @"D:\Temp\DemoGridCollapse.grd";

    var pivotSettings = InsightExtensionSettings.PivotGridGeneralSettings("pivotGrid", settings =>
    {
        settings.Height = Unit.Pixel(420);
        //settings.OptionsView.HorizontalScrollBarMode = ScrollBarMode.Visible;
        settings.OptionsView.VerticalScrollingMode = PivotScrollingMode.Virtual;
        settings.OptionsView.HorizontalScrollingMode = PivotScrollingMode.Virtual;
        settings.OptionsPager.RowsPerPage = 25;
        settings.OptionsPager.ColumnsPerPage = 15;
        settings.OptionsPager.Visible = false;
        settings.OptionsFilter.NativeCheckBoxes = false;

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.AllowedAreas = PivotGridAllowedAreas.RowArea;
            field.AreaIndex = 0;
            field.Caption = "Currency";
            field.FieldName = "TranCurrency";
            field.SortMode = PivotSortMode.Value;
            //field.TotalsVisibility = PivotTotalsVisibility.CustomTotals;
            //field.CustomTotals.Add(PivotSummaryType.Average);
            //field.CustomTotals.Add(PivotSummaryType.Max);
            //field.CustomTotals.Add(PivotSummaryType.Min);
            //field.CustomTotals.Add(PivotSummaryType.Sum);
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.AllowedAreas = PivotGridAllowedAreas.RowArea;
            field.AreaIndex = 1;
            field.Caption = "Type";
            field.FieldName = "TransactionType";
            field.SortMode = PivotSortMode.Value;
        });
        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.RowArea;
            field.AllowedAreas = PivotGridAllowedAreas.RowArea;
            field.AreaIndex = 2;
            field.Caption = "Debit/Credit";
            field.FieldName = "DebitOrCredit";
            field.SortMode = PivotSortMode.Value;
        });
        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.AllowedAreas = PivotGridAllowedAreas.DataArea;
            field.AreaIndex = 0;
            field.Caption = "Transfer Amount";
            field.FieldName = "TranAmount";
            field.CellFormat.FormatString = "#.##";
            field.CellFormat.FormatType = FormatType.Custom;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.Caption = "Max";
            field.FieldName = "TranAmount";
            field.AreaIndex = 1;
            field.SummaryType = PivotSummaryType.Max;
            field.CellFormat.FormatString = "#.##";
            field.CellFormat.FormatType = FormatType.Custom;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.Caption = "Min";
            field.FieldName = "TranAmount";
            field.AreaIndex = 2;
            field.SummaryType = PivotSummaryType.Min;
            field.CellFormat.FormatString = "#.##";
            field.CellFormat.FormatType = FormatType.Custom;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.Caption = "Count";
            field.FieldName = "TranAmount";
            field.AreaIndex = 3;
            field.SummaryType = PivotSummaryType.Count;
            field.CellFormat.FormatString = "#";
            field.CellFormat.FormatType = FormatType.Custom;
        });

        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.Caption = "Avg";
            field.FieldName = "TranAmount";
            field.AreaIndex = 4;
            field.SummaryType = PivotSummaryType.Average;
            field.CellFormat.FormatString = "#.##";
            field.CellFormat.FormatType = FormatType.Custom;
        });


        settings.Fields.Add(field =>
        {
            field.Area = PivotArea.DataArea;
            field.Caption = "Summary";
            field.FieldName = "TranAmount";
            field.AreaIndex = 5;
            field.SummaryType = PivotSummaryType.Sum;
            field.CellFormat.FormatString = "#.##";
            field.CellFormat.FormatType = FormatType.Custom;
        });

        settings.CallbackRouteValues = new
        {
            Controller = "Home",
            Action = "PivotGridPartial",
            reportType = 1,
            datasourceType = Model.DataSourceType,
            datasource = Model.DataSource
        };
        settings.CustomActionRouteValues = new
        {
            Controller = "Home",
            Action = "PivotGridPartial"
        };

        settings.PreRender = (sender, e) =>
        {
            var pivotGrid = (MVCxPivotGrid)sender;
            //pivotGrid.RetrieveFields(PivotArea.FilterArea, false);

            if (!pivotGrid.IsCallback)
            {
                if (File.Exists(layoutFileName))
                {
                    var fs = File.OpenRead(layoutFileName);
                    var optionsLayout = new PivotGridWebOptionsLayout();
                    optionsLayout.Columns.StoreAppearance = true;

                    pivotGrid.LoadLayoutFromStream(fs, optionsLayout);
                }

                if (File.Exists(collapseFileName))
                {
                    var fs = File.OpenRead(collapseFileName);
                    pivotGrid.LoadCollapsedStateFromStream(fs);
                }

                var fieldsMetadata = Model.ReportFields;

                // load metadata of pivot grid data
                //foreach (MVCxPivotGridField field in pivotGrid.Fields)
                //{
                //    field.SetupPivotGridFieldArea();
                //    field.DefaultPivotGridFieldSortMode();

                //    var fieldName = field.GetFieldNameOnly();

                //    if (fieldsMetadata != null && fieldsMetadata.ContainsKey(fieldName))
                //    {
                //        var fieldInfo = fieldsMetadata[fieldName];

                //        field.Caption = fieldInfo.Caption;
                //        field.SetupPivotGridFieldFormat(fieldInfo.FormatString);
                //    }
                //    else
                //    {
                //        field.SetupPivotGridFieldToDefaultFormat();
                //    }
                //}
            }
        };

        settings.AfterPerformCallback = (sender, e) =>
        {

            // store pivot grid layout and render to client to update hidden textbox that stores report layout
            if (ViewBag.Action != null && ViewBag.Action == "SaveLayout")
            {
                if (File.Exists(layoutFileName))
                {
                    File.Delete(layoutFileName);
                }

                if (File.Exists(collapseFileName))
                {
                    File.Delete(collapseFileName);
                }

                var pivotGrid = (MVCxPivotGrid)sender;
                var optionsLayout = new PivotGridWebOptionsLayout();
                optionsLayout.Columns.StoreAppearance = true;

                using (var fs = File.Create(layoutFileName))
                {
                    pivotGrid.SaveLayoutToStream(fs, optionsLayout);
                }

                using (var fs = File.Create(collapseFileName))
                {
                    pivotGrid.SaveCollapsedStateToStream(fs);
                }

                pivotGrid.JSProperties["cpClosePreview"] = true;
                pivotGrid.JSProperties["cpModalWindowId"] = 1;

                pivotGrid.JSProperties["cpLayout"] = pivotGrid.SaveLayoutToString(optionsLayout);
                pivotGrid.JSProperties["cpCollapseState"] = pivotGrid.SaveCollapsedStateToString();
            }
        };
    });


    switch (pivotReport.DataSourceType)
    {
        case TenantServiceType.Warehouse: //data warehouse
            Html.DevExpress().PivotGrid(pivotSettings).Bind(Model.ReportDataSet).GetHtml();
            break;

            //case TenantServiceType.Cube: //cube
            //    pivotSettings.OLAPDataProvider = OLAPDataProvider.Adomd;
            //    Html.DevExpress().PivotGrid(pivotSettings).BindToOLAP(Model.CubeConnectionString).GetHtml();
            //    break;
    }
}